<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thuria.Thark.Core</name>
    </assembly>
    <members>
        <member name="T:Thuria.Thark.Core.DataAccess.TransactionIsolation">
            <summary>
            Transaction Isolation option enumeration
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.Chaos">
            <summary>
            Chaos 
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.ReadCommitted">
            <summary>
            Read Committed
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.ReadUncommitted">
            <summary>
            Read Uncommitted
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.RepeatableRead">
            <summary>
            Repeatable Read
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.Serializable">
            <summary>
            Serializable
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.Snapshot">
            <summary>
            Snapshot
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.DataAccess.TransactionIsolation.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.DataAccess.IDatabaseBuilder">
            <summary>
            Database Builder
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.WithDatabaseProviderType(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProviderType">Database Provider Type</param>
            <returns>An instance of the Database Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.WithCommandTimeout(System.Int32)">
            <summary>
            Specify the Command Timeout
            </summary>
            <param name="newCommandTimeout">Command Timeout</param>
            <returns>An instance of the Database Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.WithConnectionString(System.String)">
            <summary>
            Specify the Connection String
            </summary>
            <param name="connectionString">Connection String</param>
            <returns>An instance of the Database Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.AsReadonly">
            <summary>
            Specify to build a Readonly Database Context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.Build">
            <summary>
            Build
            </summary>
            <returns>An instance of the newly created Database Context</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.BuildReadonly">
            <summary>
            Build a Readonly Database Context
            </summary>
            <returns>An instance of a Readonly Database Context</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseBuilder.BuildReadWrite">
            <summary>
            Build a Read Write Database Context
            </summary>
            <returns>An instance of a read/write Database Context</returns>
        </member>
        <member name="T:Thuria.Thark.Core.DataAccess.IDatabaseContext">
            <summary>
            Database Context
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.DataAccess.IDatabaseContext.DbConnection">
            <summary>
            Database Connection
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.DataAccess.IDatabaseContext.DatabaseTransactionProvider">
            <summary>
            Database  Transaction Manager
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.DataAccess.IDatabaseContext.CommandTimeout">
            <summary>
            Command Timeout
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseContext.ExecuteSqlStatement(System.String,System.Object)">
            <summary>
            Execute SQL Statement
            </summary>
            <param name="statementToExecute">Sql Statement to execute</param>
            <param name="sqlParameters">SQL Parameters</param>
            <returns>An integer specifying the number of rows affected</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseContext.Complete">
            <summary>
            Complete the transaction
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.DataAccess.IDatabaseTransactionProvider">
            <summary>
            Database Transaction Provider
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseTransactionProvider.Start(System.Transactions.TransactionScopeOption,Thuria.Thark.Core.DataAccess.TransactionIsolation,System.Int32)">
            <summary>
            Start the Transaction
            </summary>
            <param name="transactionScopeOption">Transaction Scope Option</param>
            <param name="transactionIsolation">Transaction Isolation</param>
            <param name="transactionTimespan">Transaction Timespan</param>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseTransactionProvider.Complete">
            <summary>
            Complete the Transaction
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IDatabaseTransactionProvider.Abort">
            <summary>
            Abort the Transaction
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.DataAccess.IReadonlyDatabaseContext">
            <summary>
            readonly Database Context
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IReadonlyDatabaseContext.Select``1(System.String)">
            <summary>
            Retrieve a list from the database and return a list of mapped objects
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="sqlStatement">SQL Statement</param>
            <returns>A list of mapped objects</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IReadonlyDatabaseContext.SelectOne``1(System.String)">
            <summary>
            Return a single mapped object of the specified type
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="sqlStatement">SQL Statement</param>
            <returns>Single mapped object of the specified type</returns>
        </member>
        <member name="T:Thuria.Thark.Core.DataAccess.IReadWriteDatabaseContext">
            <summary>
            Read / Write Database Context
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IReadWriteDatabaseContext.Insert``1(System.String)">
            <summary>
            Insert an object into the database
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="sqlStatement">SQL Statement</param>
            <returns>Newly created object</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IReadWriteDatabaseContext.Update``1(System.String)">
            <summary>
            Update an existing object in the database
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="sqlStatement">SQL Statement</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Thuria.Thark.Core.DataAccess.IReadWriteDatabaseContext.Delete``1(System.String)">
            <summary>
            Delete an existing object in the database
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="sqlStatement">SQL Statement</param>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Builders.IConditionBuilder">
            <summary>
            Condition Builder
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithDatabaseProvider(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProviderType">Database Provider Type</param>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithCondition(System.String,System.String,Thuria.Thark.Core.Statement.EqualityOperators,System.Object)">
            <summary>
            Specify a Condition to use
            </summary>
            <param name="sourceTable">Source Table</param>
            <param name="sourceColumn">Source Column</param>
            <param name="equalityOperator">Equality operator</param>
            <param name="conditionValue">Condition Value</param>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithCondition(System.String,System.String,Thuria.Thark.Core.Statement.EqualityOperators,System.String,System.String)">
            <summary>
            Specify a Condition to use
            </summary>
            <param name="leftConditionTable">Left Condition Table Name</param>
            <param name="leftConditionColumn">Left Condition Column Name</param>
            <param name="equalityOperator">Equality operator</param>
            <param name="rightConditionTable">Right Condition Table Name</param>
            <param name="rightConditionColumn">Right Condition Column Name</param>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithStartSection">
            <summary>
            Specify a Start Section to use
            </summary>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithEndSection">
            <summary>
            Specify an End Section to use
            </summary>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithAnd">
            <summary>
            Specify an And condition
            </summary>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.WithOr">
            <summary>
            Specify an Or condition
            </summary>
            <returns>An instance of the Condition Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IConditionBuilder.Build">
            <summary>
            Build the required Condition
            </summary>
            <returns>A string representing the condition</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Builders.IInsertStatementBuilder">
            <summary>
            Insert Statement Builder
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IInsertStatementBuilder.WithDatabaseProvider(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProviderType">Database Provider Type</param>
            <returns>An instance of the Insert Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IInsertStatementBuilder.WithTable(System.String)">
            <summary>
            SpecifY the Table to use
            </summary>
            <param name="tableName">Table Name</param>
            <returns>An instance of the Insert Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IInsertStatementBuilder.WithIdColumn(System.String)">
            <summary>
            Specify the ID Column to use
            </summary>
            <param name="columnName">Column Name</param>
            <returns>An instance of the Insert Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IInsertStatementBuilder.WithColumn(System.String,System.Object)">
            <summary>
            Specify the Column top use
            </summary>
            <param name="columnName">Column Name</param>
            <param name="columnValue">Column Value</param>
            <returns>An instance of the Insert Statement Builder</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder">
            <summary>
            Select Statement Builder
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithDatabaseProvider(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProviderType">Database Provider Type</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithTable(System.String,System.String)">
            <summary>
            Specify the Table to use
            </summary>
            <param name="tableName">Table Name</param>
            <param name="tableAlias">Table Alias (Optional)</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithTable(Thuria.Thark.Core.Statement.Models.ITableModel)">
            <summary>
            Specify the Table to use
            </summary>
            <param name="tableModel">Table Data Model</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithColumn(System.String,System.String)">
            <summary>
            Specify a Column to use
            </summary>
            <param name="statementColumn">Column Name</param>
            <param name="columnAlias">Column Alias</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithColumn(Thuria.Thark.Core.Statement.Models.IColumnModel)">
            <summary>
            Specify a Column to use
            </summary>
            <param name="statementColumn">Column Data Model</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithWhereCondition(System.String,System.String,Thuria.Thark.Core.Statement.EqualityOperators,System.Object)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="sourceTable">Source Table</param>
            <param name="sourceColumnName">Source Column Name</param>
            <param name="equalityOperator">Equality Operator</param>
            <param name="conditionValue">Condition Value</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithWhereCondition(Thuria.Thark.Core.Statement.Models.IConditionModel)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="whereCondition">Condition Data Model</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.ISelectStatementBuilder.WithWhereCondition(System.String)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="rawWhereCondition">Raw Condition SQL Statement</param>
            <returns>An instance of the Select Statement Builder</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Builders.IStatementBuilder">
            <summary>
            Statement Builder
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Builders.IStatementBuilder.DatabaseProvider">
            <summary>
            Database Provider Type
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Builders.IStatementBuilder.Errors">
            <summary>
            Error(s) that occurred during execution
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IStatementBuilder.WithDatabaseProvider(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProvider">Database Provider Type</param>
            <returns>An instance of the Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IStatementBuilder.DatabaseProviderChanged">
            <summary>
            Database Provider Changed delegate
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IStatementBuilder.Build">
            <summary>
            Build the Statement
            </summary>
            <returns>A string representing the Statement</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder">
            <summary>
            Update Statement Builder
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithDatabaseProvider(Thuria.Thark.Core.Statement.DatabaseProviderType)">
            <summary>
            Specify the Database Provider to use
            </summary>
            <param name="databaseProviderType">Database Provider Type</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithTable(System.String)">
            <summary>
            Specify the Table to use
            </summary>
            <param name="tableName">Table Name</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithColumn(System.String,System.Object)">
            <summary>
            Specify a Column to use
            </summary>
            <param name="columnName">Column Name</param>
            <param name="columnValue">Column Value</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithWhereCondition(System.String,System.String,Thuria.Thark.Core.Statement.EqualityOperators,System.Object)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="sourceTable">Source Table</param>
            <param name="sourceColumnName">Source Column Name</param>
            <param name="equalityOperator">Equality Operator</param>
            <param name="conditionValue">Condition Value</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithWhereCondition(Thuria.Thark.Core.Statement.Models.IConditionModel)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="whereCondition">Condition Data Model</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Builders.IUpdateStatementBuilder.WithWhereCondition(System.String)">
            <summary>
            Specify a Where Condition to use
            </summary>
            <param name="rawWhereCondition">Raw Condition SQL Statement</param>
            <returns>An instance of the Update Statement Builder</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Models.IBaseModel">
            <summary>
            Base Data Model
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.IBaseModel.DatabaseProvider">
            <summary>
            Database Provider Type
            </summary>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Models.IBaseModel.ToString">
            <summary>
            Create a string representation of the model
            </summary>
            <returns>A string representation of the model</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Models.IBaseModel.Equals(System.Object)">
            <summary>
            Compare the current object to an object
            </summary>
            <param name="compareObject">Object to compare to</param>
            <returns>A boolean indicating whether the objects are equal</returns>
        </member>
        <member name="M:Thuria.Thark.Core.Statement.Models.IBaseModel.GetHashCode(System.Object)">
            <summary>
            Create a Hash Code of an object
            </summary>
            <param name="obj">Object to create a hash of</param>
            <returns>A hash representation of the object</returns>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Models.IColumnModel">
            <summary>
            Column Data Model
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.IColumnModel.TableName">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.IColumnModel.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.IColumnModel.Alias">
            <summary>
            Column Alias
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Models.ICompoundConditionModel">
            <summary>
            Compound Condition Data Model
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.ICompoundConditionModel.LeftCondition">
            <summary>
            Left Condition
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.ICompoundConditionModel.RightCondition">
            <summary>
            Right Condition
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.ICompoundConditionModel.BooleanOperator">
            <summary>
            Boolean Operator
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Models.IConditionModel">
            <summary>
            Condition Data Model
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.IConditionModel.Quote">
            <summary>
            Quote Character to use
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Models.ITableModel">
            <summary>
            Table Data Model
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.ITableModel.TableName">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Models.ITableModel.Alias">
            <summary>
            Table Alias
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.Providers.IDatabaseProvider">
            <summary>
            Database Provider
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Providers.IDatabaseProvider.DatabaseProviderType">
            <summary>
            Database Provider Type
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Providers.IDatabaseProvider.StatementOpenQuote">
            <summary>
            Statement Open Quote
            </summary>
        </member>
        <member name="P:Thuria.Thark.Core.Statement.Providers.IDatabaseProvider.StatementCloseQuote">
            <summary>
            Statement Close Quote
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.DatabaseProviderType">
            <summary>
            Database Provider Type enumeration
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.DatabaseProviderType.SqlServer">
            <summary>
            Sql Server
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.DatabaseProviderType.Postgres">
            <summary>
            Postgres
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.DatabaseProviderType.Firebird">
            <summary>
            Firebird
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.EqualityOperators">
            <summary>
            Equality Operator enumeration
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.Equals">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.NotEquals">
            <summary>
            Not Equal
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.GreaterThan">
            <summary>
            Greater Than
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.GreaterThanOrEqualTo">
            <summary>
            Greater Than or Equal To
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.LessThan">
            <summary>
            Less Than
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.LessThanOrEqualTo">
            <summary>
            Less Than or Equal To
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.EqualityOperators.EndsWith">
            <summary>
            Ends with
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.BooleanOperator">
            <summary>
            Boolean Operator enumeration
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.BooleanOperator.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.BooleanOperator.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:Thuria.Thark.Core.Statement.RelationshipType">
            <summary>
            Relationship Type enumerator
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.RelationshipType.OneToOne">
            <summary>
            One to One Relationship
            </summary>
        </member>
        <member name="F:Thuria.Thark.Core.Statement.RelationshipType.OneToMany">
            <summary>
            One to Many Relationship
            </summary>
        </member>
    </members>
</doc>
